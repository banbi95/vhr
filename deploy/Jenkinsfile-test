pipeline {
    /*
    check out the updated tag on the remote git repo ,
    if any , build new image and push it to the harbor registry,
    deploy new app  onto test env  with  docker-compose
    */
    agent { label 'wsl' }
    environment {
        DOCKER_REGISTRY = 'swr.cn-north-4.myhuaweicloud.com'
        DOCKER_IMAGE = 'org-devin/vhr-backend'
        DOCKER_CREDENTIALS_ID = 'huawei-swr-auth'
        env = 'test'
        KUBE_CONTEXT = 'microk8s'

    }

    stages {
        stage('Checkout and Get newest Tag') {
            steps {
                script {
                    git 'https://github.com/banbi95/vhr.git'
                    sh 'git fetch --tags'
                    sh 'chmod 644 vuehr/nginx.conf'

                    // 获取最新标签
                    try {
                        env.LATEST_TAG = sh(
                            script: '''
                                git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0"
                            ''',
                            returnStdout: true
                        ).trim()
                    } catch (Exception e) {
                        echo "获取标签失败: ${e.message}"
                        env.LATEST_TAG = 'v0.0.0'
                    }

                    if (env.LATEST_TAG == 'v0.0.0') {
                        echo "未找到有效标签，使用默认标签 latest"
                        env.LATEST_TAG = 'latest'
                    }

                    env.VHRBACKEND_TAG = env.LATEST_TAG
                    echo "更新后的镜像标签: ${env.VHRBACKEND_TAG}"
                }
            }
        }
        stage('check iamge repo ') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        retry(3) {
                            def imageExists = sh(
                                script: """
                                  echo "Logging into Docker registry"
                                  echo "\$DOCKER_PASSWORD" | docker login -u "\$DOCKER_USERNAME" --password-stdin ${DOCKER_REGISTRY}
                                if docker manifest inspect ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${VHRBACKEND_TAG} >/dev/null 2>&1; then
                                    echo 'true'
                                else
                                    echo 'false'
                                fi
                                """,
                                returnStdout: true
                            ).trim()
                            env.IMAGE_EXISTS = imageExists 
                            echo "Imgae exists: ${env.IMAGE_EXISTS}"
                        }
                    }
                }
            }
        }
            // mvn package  
        stage('build') {
             when {
                expression { env.IMAGE_EXISTS == "false" }
            }
            steps {
                script {
                    // 确保 DOCKER_REGISTRY 和 DOCKER_IMAGE 存在且不为空
                    // if (!env.DOCKER_REGISTRY || !env.DOCKER_IMAGE) {
                    //     error 'DOCKER_REGISTRY or DOCKER_IMAGE environment variables are not set'
                    // }

                    // // 验证 DOCKER_REGISTRY 和 DOCKER_IMAGE 是否包含非法字符
                    // def validRegistry = env.DOCKER_REGISTRY =~ /^[a-zA-Z0-9._-]+$/
                    // def validImage = env.DOCKER_IMAGE =~ /^[a-zA-Z0-9._-/]+$/

                    // if (!validRegistry || !validImage) {
                    //     error 'DOCKER_REGISTRY or DOCKER_IMAGE contains invalid characters'
                    // }

                    try {
                        sh "cd vhr && docker build -t ${env.DOCKER_REGISTRY}/${env.DOCKER_IMAGE}:latest ."
                    } catch (Exception e) {
                        echo "Docker build failed: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error 'Docker build failed, stopping pipeline'
                    }
                }
            }
        }

        stage('push') {
            when {
                expression { env.IMAGE_EXISTS == "false" }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        retry(3) {
                            sh """
                                echo "登录Docker仓库"
                                echo "\$DOCKER_PASSWORD" | docker login -u "\$DOCKER_USERNAME" --password-stdin $DOCKER_REGISTRY
                                echo "推送 latest 标签镜像"
                                docker push \${DOCKER_REGISTRY}/\${DOCKER_IMAGE}:latest
                                docker tag \${DOCKER_REGISTRY}/\${DOCKER_IMAGE}:latest \${DOCKER_REGISTRY}/\${DOCKER_IMAGE}:\${VHRBACKEND_TAG}
                                echo "推送 \${VHRBACKEND_TAG} 标签镜像"
                                docker push ${DOCKER_REGISTRY}/\${DOCKER_IMAGE}:${VHRBACKEND_TAG}
                            """
                        }
                    }
                }
            }
        }
// dynamically generate docker image pull secret 
stage('Generate Docker Config') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        // 计算 Base64 编码的 auth 字符串
                        def dockerAuth = "${env.DOCKER_USERNAME}:${env.DOCKER_PASSWORD}".bytes.encodeBase64().toString()

                        // 使用 sed 替换模板中的占位符
                        sh """
                            sed -e 's|DOCKER_USERNAME_PLACEHOLDER|${env.DOCKER_USERNAME}|g' \
                                -e 's|DOCKER_PASSWORD_PLACEHOLDER|${env.DOCKER_PASSWORD}|g' \
                                -e 's|DOCKER_EMAIL_PLACEHOLDER|1790236881@qq.com|g' \
                                -e 's|DOCKER_AUTH_PLACEHOLDER|${dockerAuth}|g' \
                                .dockerconfig.json.template > .dockerconfig.json
                        """
                    }
                }

            }
        }
// dymamically generate .secret file , use sed to replace pass holder in .secret.template with pass stored in jeknins server 
stage('Generate .secret') {
    steps {
        withCredentials([
            string(credentialsId: 'vhr-db-password', variable: 'DB_PASSWORD'),
            string(credentialsId: 'vhr-rabbitmq-password', variable: 'RABBITMQ_PASSWORD'),
            string(credentialsId: 'vhr-redis-password', variable: 'REDIS_PASSWORD')
        ]) {
            script {
                sh '''
                    sed -e "s|password|${DB_PASSWORD}|g" \
                        -e "s|guest|${RABBITMQ_PASSWORD}|g" \
                        -e "s|password|${REDIS_PASSWORD}|g" \
                        .secret.template > .secret
                '''
            }
        }
    }
}


 // deploy to assigned environment
        stage('deploy with helm') {
            steps {
// replace ctx as var env 
            sh "sudo kubectl ctx ${env.KUBE_CONTEXT} "
            sh 'pwd'
            sh 'helm upgrade --install my-app ./ --namespace=vhr'
            }
        }
        
        stage('cleanup') {
            steps{
                script {
                    sh 'rm -f .dockerconfig.json .secret'
                }
            }
        }
    }
}
